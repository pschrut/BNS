/**
 * @class
 * @description Class in charge of managing the email attachment of SCM when sending an email.
 * @author jonathanj & nicolasl
 * @version 1.0 Basic version
 * <br/>Modified in 2.2
 * <ul>
 * <li>Update the size of the div with attachements</li>
 * </ul>
 */
var scm_mailAttachObject = Class.create(/** @lends scm_mailAttachObject.prototype */{
	/**
	 * The basic template of the mail attach object
	 * @type Template
	 * @since 1.0
	 */
	mainTemplate	: null,
	/**
	 * The attachment template for each attachment
	 * @type Template
	 * @since 1.0
	 */
	attachTemplate	: null,
	/**
	 * The number of objects currently displayed in the object
	 * @type int
	 * @since 1.0
	 */
	nbrObject		: null,
	/**
	 * The HTML code generated by the object
	 * @type HTML
	 * @since 1.0
	 */
	htmlObject		: null,
	/**
	 * The target into which the HTML should be inserted 
	 * @type DOM Element
	 * @since 1.0
	 */
	target			: null,
	
	/**
	 * Constructor for the class. It initialize the templates and the attributes.
	 * @param {JSon} args Json Object containing:<ul>
	 * 	<li>target: the Dom element reference where the generated code should be inserted</li>
	 * 	<li>idObject: the desired Id for the attachment object</li>
	 * </ul>
	 * @since 1.0
	 */
	initialize: function(args){
		this.target = args.target;
		this.htmlObject = new Element('div',{className:'SCM_mailAttahment_container', id: args.idObject});
		this.mainTemplate = new Template('<div id="attachDiv_#{idAttach}" class="SCM_mailAttachment_mainDiv"></div>');
		this.attachTemplate = new Template(	'<div id="iconForAttach_#{idAttach}" class="#{classIconAttach} SCM_mailAttachment_iconAttach"></div>'+
											'<div id="textForAttach_#{idAttach}" class="SCM_mailAttachment_textAttach">#{textAttach}</div>'+
											'<div id="deleteAttach_#{idAttach}"  fileid="#{fileId}" class="application_currentSelection SCM_mailAttachment_deleteIcon"></div>');
		this.nbrObject = 0;
		this.target.insert(this.htmlObject);									
	},
	/**
	 * Function in charge of adding the display of an attachment in the main object.
	 * The added display is based on the attachTemplate of the class and the JSon object given in parameter.
	 * @param {JSon} args A JSon onbject representing the attachment with it's properties. the components of this JSon object are:<ul>
	 * 	<li>idAttach: the id of the attachment,</li>
	 * 	<li>classIconAttach: the class name containing the image representing the type of the file,</li>
	 * 	<li>textAttch: the text (name) of the attachment object and</li>
	 * 	<li>fileId: the id of the file in order to be able to remove the attachment from the calling class if the cross is clicked.</li> 
	 * </ul>
	 * A click on the cross to remove the attachment should:<ul>
	 * 	<li>identify the element clicked,</li>
	 * 	<li>extract the id of the attachment based on the element retrieved before,</li>
	 * 	<li>remove the element from the display,</li>
	 * 	<li>raise the event that will be caught by the calling class,</li>
	 * 	<li>decrease the number of element attached.</li>
	 * @since 1.0
	 * <br/> Modified in 2.2
	 * <ul>
	 * <li>Update the size of the div around the attachement to avoid having it overwritting the send box</li>
	 * </ul>
	 */
	addAttachment: function(args){
		this.htmlObject.insert(this.mainTemplate.evaluate({	idAttach: args.idAttach }));
		this.htmlObject.down('[id="attachDiv_'+ args.idAttach +'"]').insert(this.attachTemplate.evaluate(
		{	
			idAttach		: args.idAttach, 
			classIconAttach	: args.classIconAttach, 
			textAttach		: args.textAttach,
			fileId			: args.fileId
		}));
		
		this.htmlObject.down('[id="deleteAttach_'+ args.idAttach +'"]').observe('click', 
			function(e){
				// STEP 1 - Get the element
				var targ;
				if (!e) var e = window.event;
				if (e.target) targ = e.target;
				else if (e.srcElement) targ = e.srcElement;
				if (targ.nodeType == 3) // defeat Safari bug
					targ = targ.parentNode;
				// STEP 2 - Get the ID	
				var idAttach = parseInt(targ.id.gsub('deleteAttach_',''));
				var fileId	 = targ.readAttribute('fileid');	
				// STEP 3 - Perform the action
				this.htmlObject.down('[id="attachDiv_'+ idAttach +'"]').remove();
				this.nbrObject--;
				if(this.nbrObject < 2){
					//since 2.2 Also update the height of the parent nodes
					this.htmlObject.removeClassName('SCM_mailAttahment_container2');
					this.htmlObject.up(0).removeClassName('SCM_mailAttahment_container2');
					this.htmlObject.up(1).removeClassName('SCM_mailAttahment_container2');
					this.htmlObject.up(2).setStyle({'height': (this.htmlObject.up(0).getHeight() + 5) + 'px'});
				}
				document.fire('EWS:scm_removeAttachment', {attachId:idAttach, fileId: fileId});
			}.bindAsEventListener(this));
		
		this.nbrObject++;
		if(this.nbrObject > 1){
			if(this.nbrObject > 1){
			//since 2.2 Also update the height of the parent nodes
			this.htmlObject.addClassName('SCM_mailAttahment_container2');
			this.htmlObject.up(0).addClassName('SCM_mailAttahment_container2');
			this.htmlObject.up(1).addClassName('SCM_mailAttahment_container2');
			this.htmlObject.up(2).setStyle({'height': (this.htmlObject.up(0).getHeight() + 5) + 'px'});
		}
		}
	},
	/**
	 * Function in charge of changing the size of the main div containing the attahcments. 
	 * @param {int} attachId The attachment to remove.
	 * @since 1.0
	 * @deprecated since 1.0
	 */
	removeAttachment: function(attachId){
		this.htmlObject.down('[id="attachDiv_'+ attachId +'"]').remove();
		this.nbrObject--;
		if(this.nbrObject < 2){
			this.htmlObject.removeClassName('SCM_mailAttahment_container2')
		}
		document.fire('EWS:scm_removeAttachment', {attachId:attachId});
	},
	/**
	 * Function in charge of cleaning the display. It updates the content of the main div and resets the number of attached items to 0.
	 * @since 1.0
	 */
	clean: function(){
		this.htmlObject.update();
		this.nbrObject = 0;
	}
	
})
